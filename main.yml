---
- name: "fetching instance details"
  hosts: localhost
  vars:
    region: "ap-south-1"
    asg_name: "ansible-asg"
  tasks:
    - name: "gathering asg instance details {{ asg_name }}"
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:aws:autoscaling:groupName": "{{ asg_name }}"
          "tag:project": "zomato"
          "tag:env": "dev"
          instance-state-name: [ "running"]
      register: aws_instance_details
     
    - name: "creation of dynamic inventory"
      add_host:
        groups: "ags_instances"
        hostname: "{{ item.public_ip_address  }}"
        ansible_ssh_user: "ec2-user"
        ansible_ssh_host: '{{ item.public_ip_address  }}'
        ansible_ssh_port: "22"
        ansible_ssh_private_key_file: "devops.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ aws_instance_details.instances }}"

- name: "deploying website to asg instances"
  become: true
  hosts: ags_instances
  serial: 2
  vars:
    httpd_owner: "apache"
    httpd_group: "apache"
    httpd_port: "80"
    httpd_domain: "blog.sanjos.tech"
    repo_url: "https://github.com/josyvarghese1992/aws-elb-site-1.git"
    health_check_delay: 30
    packages:
      - httpd
      - php
      - git
    clone_dir: "/var/website/"

  tasks:

    - name: "Package Installation"
      yum:
        name: "{{ packages }}"
        state: present
      notify:
        - reload-httpd

    - name: "Creating httpd.conf from httpd.conf.j2 template"
      template:
        src: ./httpd.conf.j2
        dest: /etc/httpd/conf/httpd.conf
        owner: "{{ httpd_owner }}"
        group: "{{ httpd_group }}"
      notify:
        - reload-httpd
 
    - name: "Creating virtualhost from virtualhost.conf.j2 {{ httpd_domain }}"
      template:
        src: "./virtualhost.conf.j2"
        dest: "/etc/httpd/conf.d/{{ httpd_domain }}.conf"
        owner: "{{ httpd_owner }}"
        group: "{{ httpd_group }}"
      notify:
        - reload-httpd
 
    - name: "creating docroot /var/www/html/{{ httpd_domain }}"
      file:
        path: "/var/www/html/{{ httpd_domain }}"
        state: directory
        owner: "{{ httpd_owner }}"
        group: "{{ httpd_group }}"
 
    - name: "creating clone directories {{ clone_dir }}"
      file:
        path: "{{ clone_dir }}"
        state: directory
 
    - name: "clone website contents from {{ repo_url }}"
      git:
        repo: "{{ repo_url }}"
        dest: "{{ clone_dir }}"
      register: clone_status
      notify:
        - restart-httpd
        - online-delay

    - name: "off-loading instance {{ ansible_fqdn }}"
      when: clone_status.changed
      service:
        name: httpd
        state: stopped
      notify:
        - restart-httpd
        - online-delay
        
    - name: "waiting for connection draining {{ ansible_fqdn }}"
      when: clone_status.changed
      wait_for:
        timeout: "{{ health_check_delay }}"     
 
    - name: "copying webfiles to /var/www/html/{{httpd_domain}}"
      when: clone_status.changed
      copy:
        src: "{{ clone_dir }}"
        dest: "/var/www/html/{{ httpd_domain }}"
        remote_src: true
      notify:
        - restart-httpd
        - online-delay

  handlers:
 
    - name: "restart-httpd"
      service:
        name: httpd
        state: restarted
        enabled: true

    - name: "reload-httpd"
      service:
        name: httpd
        state: reloaded
        enabled: true

    - name: "online-delay"
      wait_for:
        timeout: "50"
